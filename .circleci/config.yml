version: 2.1

commands:
  setup_circleci_bazel_config:
    description: Copy RC file that contains common options for CI
    steps:
      - run:
          name: Setting up CircleCI bazel configuration
          command: sudo cp .circleci/bazel.rc /etc/bazel.bazelrc
  custom_attach_workspace:
    description: Attach workspace at a predefined location
    steps:
      - attach_workspace:
          at: ~/
  custom_restore_cache:
    description: Restore cache through a cache key
    steps:
      - restore_cache:
          keys:
            - infra-{{ checksum "yarn.lock" }}-{{ checksum "WORKSPACE" }}
            - infra
  custom_save_cache:
    description: Save cache
    steps:
      - save_cache:
          key: infra-{{ checksum "yarn.lock" }}-{{ checksum "WORKSPACE" }}
          paths:
            - "node_modules"
            - "stacks/spica/node_modules"
            - "~/bazel_repository_cache"
  checkout_code:
    description: Checkout repository and rebase on top of the target branch.
    steps:
      - checkout
      - run:
          name: "Rebase the branch on top of the target branch."
          command: |
            # We do this because we want our tests to be prospective. Basically, we test whether will these test pass if we merge it onto target branch.
            # NOTE: Branches that have conflicts with the target branch will fail directly.
            # See: https://ideas.circleci.com/ideas/CCI-I-926
            if [ ! -z $CI_PULL_REQUEST ]; then
                URL="https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${CI_PULL_REQUEST//*pull\//}"
                export CIRCLE_TARGET_BRANCH=$(curl -s "$URL" | jq -e '.base.ref' | tr -d '"')
                git merge --ff-only "origin/$CIRCLE_TARGET_BRANCH"
            fi
  install_mongodb:
    description: Install mongodb
    steps:
      - run:
          name: "Install mongodb"
          command: |
            wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -
            echo "deb http://repo.mongodb.org/apt/debian stretch/mongodb-org/4.2 main" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list
            sudo apt-get update
            sudo apt-get install mongodb-org-server -y
executors:
  default-executor:
    working_directory: ~/spica
    resource_class: xlarge
    docker:
      - image: circleci/node:12-browsers
  api-executor:
    working_directory: ~/spica
    resource_class: xlarge
    docker:
      - image: circleci/node:12

orbs:
  gcp-gke: circleci/gcp-gke@1.0.3
  gcp-cli: circleci/gcp-cli@1.8.3
  helm: circleci/helm@0.2.3

jobs:
  setup:
    executor: default-executor
    steps:
      - checkout_code
      - custom_restore_cache
      - run:
          name: "Installing dependencies"
          command: yarn install --frozen-lockfile --non-interactive
      - custom_save_cache
      - persist_to_workspace:
          root: ~/
          paths:
            - ./spica
            - ./bazel_repository_cache
  lint:
    executor: default-executor
    steps:
      - custom_attach_workspace
      - run: "yarn bazel:format -mode=check"
      - run: "yarn code:format-check"

  test_api:
    executor: api-executor
    steps:
      - custom_attach_workspace
      - install_mongodb
      - setup_circleci_bazel_config
      - run:
          name: "Running tests"
          command: yarn --silent bazel query 'tests(//...)' --output label | xargs yarn bazel test --test_tag_filters=-flaky,-e2e
      - custom_save_cache

  test_api_flaky:
    executor: api-executor
    steps:
      - custom_attach_workspace
      - install_mongodb
      - setup_circleci_bazel_config
      - run:
          name: "Running tests"
          command: yarn --silent bazel query 'tests(//...)' --output label | xargs yarn bazel test --test_tag_filters=flaky --flaky_test_attempts=5

  test_api_e2e:
    executor: api-executor
    steps:
      - custom_attach_workspace
      - install_mongodb
      - setup_circleci_bazel_config
      - run:
          name: "Running tests"
          command: yarn --silent bazel query 'tests(//...)' --output label | xargs yarn bazel test --test_tag_filters=-flaky,e2e --flaky_test_attempts=5

  test_spica:
    executor: default-executor
    steps:
      - custom_attach_workspace
      - run:
          name: "Running tests"
          command: cd ./stacks/spica && yarn ng test --browsers=ChromeHeadless --watch=false --progress=false --reporters=spec

  deploy:
    executor: default-executor
    steps:
      - setup_remote_docker
      - custom_attach_workspace
      - setup_circleci_bazel_config
      - gcp-cli/install
      - gcp-cli/initialize
      - gcp-gke/install
      - run:
          name: "Configuring docker"
          command: |
            gcloud container clusters get-credentials $CLUSTER_NAME --zone $GOOGLE_COMPUTE_ZONE --project $GOOGLE_PROJECT_ID
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - run:
          name: "Deploying artifacts"
          command: |
            (cd stacks/spica && yarn ng build --prod --progress=false)
            yarn bazel run deploy.replace -- --config=release -- --force
  release:
    executor: default-executor
    steps:
      - setup_remote_docker
      - custom_attach_workspace
      - setup_circleci_bazel_config
      # We depend on these utilies cause scripts/publish.sh depends on scripts/sync_charts.sh 
      # which depends on these utilies (gsutil, helm)
      - gcp-cli/install
      - gcp-cli/initialize
      - helm/install-helm-client:
          version: v3.2.0
      - run:
          name: "Authenticate with the registries"
          command: |
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - run:
          name: "Publishing artifacts (latest)"
          command: ./scripts/publish.sh latest

workflows:
  version: 2
  default:
    jobs:
      - setup
      - lint:
          requires:
            - setup
          filters:
            #Â Do not run on release branches
            branches:
              ignore: /^(\d\.\d\.x|master)$/
      - test_api:
          requires:
            - setup
          filters:
            branches:
              ignore: master
      - test_api_e2e:
          requires:
            - setup
          filters:
            branches:
              ignore: master
      - test_api_flaky:
          requires:
            - setup
          filters:
            branches:
              ignore: master
      - test_spica:
          requires:
            - setup
          filters:
            branches:
              ignore: master
      - deploy:
          requires:
            - setup
          filters:
            branches:
              only: master
      - release:
          requires:
            - test_api_flaky
            - test_api_e2e
            - test_api
            - test_spica
          filters:
            branches:
              # Run only on branches whose name match 0.0.x pattern
              only: /^\d\.\d\.x$/
