version: 2.1

commands:
  setup_circleci_bazel_config:
    description: Copy RC file that contains common options for CI
    steps:
      - run:
          name: Setting up CircleCI bazel configuration
          command: sudo cp .circleci/bazel.rc /etc/bazel.bazelrc
  custom_attach_workspace:
    description: Attach workspace at a predefined location
    steps:
      - attach_workspace:
          at: ~/
  custom_restore_cache:
    description: Restore cache through a cache key
    steps:
      - restore_cache:
          keys:
            - infra-{{ checksum "yarn.lock" }}-{{ checksum "WORKSPACE" }}
            - infra
  checkout_code:
    description: Checkout repository and rebase on top of the target branch.
    steps:
      - checkout
      - run:
          name: "Rebase the branch on top of the target branch."
          command: |
            # We do this because we want our tests to be prospective. Basically, we test whether will these test pass if we merge it onto target branch.
            # NOTE: Branches that have conflicts with the target branch will fail directly.
            # See: https://ideas.circleci.com/ideas/CCI-I-926
            if [ ! -z $CI_PULL_REQUEST ]; then
                URL="https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${CI_PULL_REQUEST//*pull\//}"
                export CIRCLE_TARGET_BRANCH=$(curl -s "$URL" | jq -e '.base.ref' | tr -d '"')
                git merge --ff-only "origin/$CIRCLE_TARGET_BRANCH"
            fi
executors:
  default-executor:
    working_directory: ~/spica
    docker:
      - image: circleci/node:11-browsers
  api-executor:
    working_directory: ~/spica
    docker:
      - image: circleci/node:11
      - image: circleci/mongo:4.2.1

orbs:
  gcp-gke: circleci/gcp-gke@1.0.3
  gcp-cli: circleci/gcp-cli@1.8.3

jobs:
  setup:
    executor: default-executor
    steps:
      - checkout_code
      - custom_restore_cache
      - run:
          name: "Installing dependencies"
          command: yarn install --frozen-lockfile --non-interactive
      - persist_to_workspace:
          root: ~/
          paths:
            - ./spica
            - ./bazel_repository_cache
  lint:
    executor: default-executor
    steps:
      - custom_attach_workspace
      - run: "yarn bazel:format -mode=check"
      - run: "yarn code:format-check"

  test_api:
    executor: api-executor
    steps:
      - custom_attach_workspace
      - setup_circleci_bazel_config
      - run:
          name: "Running tests"
          command: ./node_modules/.bin/bazel query 'tests(//...)' --output label | xargs ./node_modules/.bin/bazel test

  test_spica:
    executor: default-executor
    steps:
      - custom_attach_workspace
      - run:
          name: "Running tests"
          command: cd ./stacks/spica && yarn ng test --browsers=ChromeHeadless --watch=false --progress=false --reporters=spec

  deploy:
    executor: default-executor
    steps:
      - setup_remote_docker
      - custom_attach_workspace
      - setup_circleci_bazel_config
      - gcp-cli/install
      - gcp-cli/initialize
      - gcp-gke/install
      - run:
          name: "Configuring docker"
          command: |
            gcloud container clusters get-credentials $CLUSTER_NAME --zone $GOOGLE_COMPUTE_ZONE --project $GOOGLE_PROJECT_ID
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - run:
          name: "Deploying artifacts"
          command: |
            (cd stacks/spica && yarn ng build --prod --progress=false)
            ./node_modules/.bin/bazel run deploy.replace --config=release -- --force

workflows:
  version: 2
  main:
    jobs:
      - setup
      - lint:
          requires:
            - setup
      - test_api:
          requires:
            - setup
      - test_spica:
          requires:
            - setup
      - deploy:
          requires:
            - setup
            # - test_api
            - test_spica
          filters:
            branches:
              only: master
