var_1: &job_defaults
  working_directory: ~/spica
  docker:
    - image: circleci/node:11

var_2: &setup_circleci_bazel_config
  run:
    name: Setting up CircleCI bazel configuration
    command: sudo cp .circleci/bazel.rc /etc/bazel.bazelrc

var_3: &cache_key infra-{{ checksum "yarn.lock" }}-{{ checksum "WORKSPACE" }}

var_4: &restore_cache
  restore_cache:
    keys:
      - *cache_key
      # fallback to using the latest cache if no exact match is found
      - infra

var_5: &attach_workspace
  attach_workspace:
    at: ~/

var_6: &checkout_code
  checkout:
    # After checkout, rebase on top of master. By default, PRs are not rebased on top of master,
    # which we want. See https://discuss.circleci.com/t/1662
    post: git pull --ff-only origin "refs/pull/${CI_PULL_REQUEST//*pull\//}/merge"

version: 2
jobs:
  setup:
    <<: *job_defaults
    steps:
      - *checkout_code
      - *restore_cache
      - run:
          name: "Installing dependencies"
          command: yarn install --frozen-lockfile --non-interactive
      - persist_to_workspace:
          root: ~/
          paths:
            - ./spica
            - ./bazel_repository_cache
  lint:
    <<: *job_defaults
    steps:
      - *attach_workspace
      - run: "yarn bazel:format -mode=check"
      - run: "yarn code:format-check"
  test:
    <<: *job_defaults
    steps:
      - *attach_workspace
      - *setup_circleci_bazel_config
      - run:
          name: "Running tests"
          command: ./node_modules/.bin/bazel query 'tests(//...)' --output label | xargs ./node_modules/.bin/bazel test
      - run:
          name: "Running tests (spica)"
          command: |
            cd stacks/spica
            yarn ng build @spica-client/core
      - run:
          name: "Running tests (spica)"
          command: |
            cd stacks/spica
            yarn ng build @spica-client/common
      - run:
          name: "Running tests (spica)"
          command: |
            cd stacks/spica
            yarn ng build @spica-client/material
      - run:
          #Â After we switch spica(client) to bazel we gonna get rid of this
          name: "Running tests (spica)"
          command: |
            cd stacks/spica;
            yarn ng build --prod --progress=false --base-href="/spica/"
            
      - persist_to_workspace:
          root: ~/
          paths:
            - ./spica
            - ./bazel_repository_cache
      - save_cache:
          key: *cache_key
          paths:
            - "node_modules"
            - "stacks/spica/node_modules"
            - "~/bazel_repository_cache"
  deploy:
    <<: *job_defaults
    steps:
      - setup_remote_docker
      - *attach_workspace
      - *setup_circleci_bazel_config
      - run:
          # We need to use install gcloud instead using google/cloud-sdk because google/cloud-sdk is not based on debian
          # google/cloud-sdk us prevents from using basic commands like sudo
          name: "Installing gcloud and kubectl"
          command: |
            echo "deb http://packages.cloud.google.com/apt cloud-sdk-stretch main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
            sudo apt-get update && sudo apt-get install -y google-cloud-sdk=243.0.0-0
            sudo apt-get install kubectl
      - run:
          name: "Configuring kubectl and docker"
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud config set project spica-239113
            gcloud config set compute/zone us-central1-a
            gcloud container clusters get-credentials master --zone us-central1-a --project spica-239113
            gcloud auth configure-docker
      - run:
          name: "Deploying artifacts"
          command: ./node_modules/.bin/bazel run deploy.replace -- --force
workflows:
  version: 2
  default:
    jobs:
      - setup
      - lint:
          requires:
            - setup
      - test:
          requires:
            - lint
      - deploy:
          requires:
            - test
          filters:
            branches:
              only: master
