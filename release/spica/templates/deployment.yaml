apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  {{if .Values.namespaceUse}}
  namespace: {{.Values.namespace}}
  {{end}}
  name: database
spec:
  serviceName: mongo
  replicas: {{if .Values.history}} 3 {{else}} 2 {{end}}
  template:
    metadata:
      labels:
        app: database
    spec:
      terminationGracePeriodSeconds: 10
      initContainers:
        - name: init
          image: spicaengine/initcontainer:{{.Values.spicaVersion}}
          imagePullPolicy: Always
      containers:
        - name: mongo
          image: mongo:4.2
          command:
            - mongod
            - "--replSet"
            - rs0
            - "--bind_ip_all"
          ports:
            - containerPort: 27017
          resources:
            requests:
              memory: "{{.Values.databaseRequestMemory}}Mi"
              cpu: "{{.Values.databaseRequestCpu}}m"
            limits:
              memory: "{{.Values.databaseLimitMemory}}Mi"
              cpu: "{{.Values.databaseLimitCpu}}m"
          volumeMounts:
            - name: {{.Values.dataPath}}
              mountPath: {{.Values.databaseMountPath}}
  volumeClaimTemplates:
    - metadata:
        name: {{.Values.dataPath}}
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{.Values.databaseStorage}}Gi
---
apiVersion: v1
kind: Service
metadata:
  {{if .Values.namespaceUse}}
  namespace: {{.Values.namespace}}
  {{end}}
  name: mongo
spec:
  publishNotReadyAddresses: true
  ports:
    - port: 27017
      targetPort: 27017
  clusterIP: None
  selector:
    app: database
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  {{if .Values.namespaceUse}}
  namespace: {{.Values.namespace}}
  {{end}}
  name: spica
spec:
  serviceName: spica
  replicas: 1
  template:
    metadata:
      labels:
        app: spica
    spec:
      containers:
        - name: spica
          image: spicaengine/spica:{{.Values.spicaVersion}}
          imagePullPolicy: Always
          ports:
            - containerPort: 80
          env:
            - name: BASE_URL
              value: "/{{.Values.spicaPath}}"
          resources:
            requests:
              memory: "{{.Values.spicaRequestMemory}}Mi"
              cpu: "{{.Values.spicaRequestCpu}}m"
            limits:
              memory: "{{.Values.spicaLimitMemory}}Mi"
              cpu: "{{.Values.spicaLimitCpu}}m"
        - name: api
          image: spicaengine/api:{{.Values.spicaVersion}}
          imagePullPolicy: Always
          resources:
            requests:
              memory: "{{.Values.apiRequestMemory}}Mi"
              cpu: "{{.Values.apiRequestCpu}}m"
            limits:
              memory: "{{.Values.apiLimitMemory}}Mi"
              cpu: "{{.Values.apiLimitCpu}}m"
          ports:
            - containerPort: 4300
          env:
            - name: PORT
              value: "4300"
            - name: DATABASE_URI
              value: mongodb://database-0.mongo.{{if .Values.namespaceUse}}{{.Values.namespace}}{{else}}default{{end}}.svc.cluster.local,database-1.mongo.{{if .Values.namespaceUse}}{{.Values.namespace}}{{else}}default{{end}}.svc.cluster.local{{if .Values.history}},database-2.mongo.{{if .Values.namespaceUse}}{{.Values.namespace}}{{else}}default{{end}}.svc.cluster.local{{end}}
            - name: REPLICA_SET
              value: rs0
            - name: DATABASE_NAME
              value: spica
            - name: SECRET
              value: $2b$10$shOzfYpDCy.RMgsVlwdQeONKGGzaBTfTQAjmXQNpMp4aKlLXrfZ/C
            - name: DEFAULT_PASSWORD
              value: spica
            - name: PUBLIC_HOST
              value: "https://{{if .Values.domainUse}}{{.Values.domain}}{{else}}{{.Values.loadBalancerIp}}{{end}}/api"
            - name: PERSISTENT_PATH
              value: /data
          volumeMounts:
            - name: {{.Values.dataPath}}
              mountPath: {{.Values.apiMountPath}}
  volumeClaimTemplates:
    - metadata:
        name: {{.Values.dataPath}}
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{.Values.apiStorage}}Gi
---
apiVersion: v1
kind: Service
metadata:
  {{if .Values.namespaceUse}}
  namespace: {{.Values.namespace}}
  {{end}}
  name: spica
spec:
  type: NodePort
  ports:
    - name: spica
      port: 80
      targetPort: 80
    - name: api
      port: 4300
      targetPort: 4300
  selector:
    app: spica
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  {{if .Values.namespaceUse}}
  namespace: {{.Values.namespace}}
  {{end}}
  name: gateway
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: {{.Values.proxyBodySize}}M
    nginx.ingress.kubernetes.io/client-body-buffer-size: {{.Values.clientBodyBufferSize}}M
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    kubernetes.io/ingress.class: nginx
spec:
  {{if .Values.ssl}}
  tls:
    - hosts:
        - {{.Values.domain}}
      secretName: {{.Values.secretName}}
  {{end}}
  rules:
      {{if .Values.domainUse}}
    - host: {{.Values.domain}}
      http:
      {{else}}
    - http:
      {{end}}
        paths:
          - path: /{{.Values.spicaPath}}?(.*)
            backend:
              serviceName: spica
              servicePort: 80
          - path: /api/?(.*)
            backend:
              serviceName: spica
              servicePort: 4300