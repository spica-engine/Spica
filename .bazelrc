# A more useful default output mode for bazel query, which
# prints "ts_library rule //foo:bar" instead of just "//foo:bar".
query --output=label_kind


# Turn off legacy external runfiles
build --nolegacy_external_runfiles
run --nolegacy_external_runfiles
test --nolegacy_external_runfiles


# Turn on --incompatible_strict_action_env which was on by default
# in Bazel 0.21.0 but turned off again in 0.22.0. Follow
# https://github.com/bazelbuild/bazel/issues/7026 for more details.
# This flag is needed to so that the bazel cache is not invalidated
# when running bazel via `yarn bazel`.
build --incompatible_strict_action_env
run --incompatible_strict_action_env
test --incompatible_strict_action_env


# These variables must be set in production deployments
#Â In order to make things work as expected.
build:slavedelay --define=DATABASE_URI=mongodb://localhost:27017,localhost:27018,localhost:27019
build --define=DATABASE_URI=mongodb://localhost:27017
build --define=REPLICA_SET=infra
build --define=DATABASE_NAME=spica
build --define=PUBLIC_HOST=http://localhost:4300
build --define=PORT=4300
build --define=PERSISTENT_PATH=/tmp #Very persistent!
build --define=SECRET=2b10shOzfYpDCy.RMgsVlwdQeONKGGzaBTfTQAjmXQNpMp4aKlLXrfZ/C
build --define=DEFAULT_PASSWORD=spica
build --define=BUCKET_HOOKS=true
build --define=BUCKET_HISTORY=true
build --define=ACTIVITY_STREAM=true
build --define=EXPERIMENTAL_BUCKET_REALTIME=true
build --define=FUNCTION_GRPC_ADDRESS=0.0.0.0:5688
build --define=FUNCTION_POOL_SIZE=1

build:release --stamp --workspace_status_command="./scripts/current_version.sh"

# Support for debugging NodeJS tests
# Add the Bazel option `--config=debug` to enable this
# --test_output=streamed
#     Stream stdout/stderr output from each test in real-time.
#     See https://docs.bazel.build/versions/master/user-manual.html#flag--test_output for more details.
# --test_strategy=exclusive
#     Run one test at a time.
# --test_timeout=9999
#     Prevent long running tests from timing out
#     See https://docs.bazel.build/versions/master/user-manual.html#flag--test_timeout for more details.
# --nocache_test_results
#     Always run tests
# --node_options=--inspect-brk
#     Pass the --inspect-brk option to all tests which enables the node inspector agent.
#     See https://nodejs.org/de/docs/guides/debugging-getting-started/#command-line-options for more details.
# --define=VERBOSE_LOGS=1
#     Rules will output verbose logs if the VERBOSE_LOGS environment variable is set. `VERBOSE_LOGS` will be passed to
#     `nodejs_binary` and `nodejs_test` via the default value of the `default_env_vars` attribute of those rules.
# --compilation_mode=dbg
#     Rules may change their build outputs if the compilation mode is set to dbg. For example,
#     mininfiers such as terser may make their output more human readable when this is set. Rules will pass `COMPILATION_MODE`
#     to `nodejs_binary` executables via the actions.run env attribute.
#     See https://docs.bazel.build/versions/master/user-manual.html#flag--compilation_mode for more details.
test:debug --test_output=streamed --test_strategy=exclusive --test_timeout=9999 --nocache_test_results --define=VERBOSE_LOGS=1
# Use bazel run with `--config=debug` to turn on the NodeJS inspector agent.
# The node process will break before user code starts and wait for the debugger to connect.
run:debug --define=VERBOSE_LOGS=1 -- --node_options=--inspect-brk
# The following option will change the build output of certain rules such as terser and may not be desirable in all cases
build:debug --compilation_mode=dbg


# Use phyton 2 instead of 3
build --host_force_python=PY2
run --host_force_python=PY2