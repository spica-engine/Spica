{
  "http": "export default function(request, response){return response.status(201).send('Message from example http function.');}",
  "database": {
    "INSERT": "export default function(change){console.log(change.kind + ' action has been performed on document with id ' + change.documentKey + ' of collection ' + change.collection);console.log('Document: ',change.document);}",
    "REPLACE": "export default function(change){console.log(change.kind + ' action has been performed on document with id ' + change.documentKey + ' of collection ' + change.collection);console.log('Document: ',change.document);}",
    "UPDATE": "export default function(change){console.log(change.kind + ' action has been performed on document with id ' + change.documentKey + ' of collection ' + change.collection);console.log('Document: ',change.document);}",
    "DELETE": "export default function(change){console.log(change.kind + ' action has been performed on document with id ' + change.documentKey + ' of collection ' + change.collection);}"
  },
  "firehose": "export default function (message, {socket, pool}) {console.log(message.name);console.log(message.data.url);const isAuthorized = false;if (isAuthorized) {socket.send('authorization', {state: true});pool.send('connection', {id: socket.id,ip_address: socket.remoteAddress});} else {socket.send('authorization', {state: false, error: 'Authorization has failed.'});socket.close();}}",
  "schedule": "export default function(unregister){console.log('Message from example schedule function.');const unregister_date = new Date('2050-01-01');const now = new Date();if(now > unregister_date){unregister();}}",
  "system": "export default function(){const now = new Date();console.log('System has became ready at ' , now);}",
  "bucket": {
    "BEFORE": {
      "INSERT": "export default function(request){console.log('User with ' + request.headers.authorization + ' will insert a new entry to bucket that has id ' + request.bucket );const can_insert = true;return can_insert;}",
      "UPDATE": "export default function(request){console.log('User with ' + request.headers.authorization + ' will update the document that has id ' + request.document + ' of bucket that has id ' + request.bucket );const can_update = true;return can_update;}",
      "DELETE": "export default function(request){console.log('User with ' + request.headers.authorization + ' will delete the document that has id ' + request.document + ' of bucket that has id ' + request.bucket );const can_delete = true;return can_delete;}",
      "GET": "export default function(request){console.log('User with ' + request.headers.authorization + ' will display the document that has id ' + request.document + ' of bucket that has id ' + request.bucket );const hidden_field = 'password';return [ { $unset: hidden_field } ];}",
      "INDEX": "export default function(request){console.log('User with ' + request.headers.authorization + ' will display all documents of bucket that has id ' + request.bucket );const criteria = { age: 20 };return [ { $match: criteria } ];}",
      "STREAM": "export default function(request){console.log('User with ' + request.headers.authorization + ' will display all documents of bucket that has id ' + request.bucket + ' via websocket' );const filter = { status: 'active' };return filter;}"
    },
    "AFTER": {
      "ALL": "export default function(change){console.log(change.kind + ' action has been performed on document with id ' + change.documentKey + ' of bucket with id ' + change.bucket);console.log('Previous document: ',change.previous);if(change.current){console.log('Current document: ',change.current)}}",
      "INSERT": "export default function(change){console.log(change.kind + ' action has been performed on document with id ' + change.documentKey + ' of bucket with id ' + change.bucket);console.log('Previous document: ',change.previous);console.log('Current document: ',change.current)}",
      "UPDATE": "export default function(change){console.log(change.kind + ' action has been performed on document with id ' + change.documentKey + ' of bucket with id ' + change.bucket);console.log('Previous document: ',change.previous);console.log('Current document: ',change.current)}",
      "DELETE": "export default function(change){console.log(change.kind + ' action has been performed on document with id ' + change.documentKey + ' of bucket with id ' + change.bucket);console.log('Previous document: ',change.previous)}"
    }
  }
}
