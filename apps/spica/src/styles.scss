@use '@angular/material' as mat;

$primary: mat.define-palette(mat.$gray-palette, 900, 500, 700);
$primary-for-dark: mat.define-palette(mat.$gray-palette, 900, 100, 700, 100);
$accent: mat.define-palette(mat.$amber-palette, A200, A100, A400);

$app-light-theme: mat.define-light-theme($primary, $accent);
$app-dark-theme: mat.define-dark-theme($primary-for-dark, $accent);

@include mat.all-component-themes($app-light-theme);
@include mat.all-component-themes($app-dark-theme);

@mixin vars($theme, $tone) {
  --tone-diff: #{$tone};
  @each $colorName, $colorMap in $theme {
    @if type-of($colorMap) == "map" {
      @each $colorKey, $colorValue in $colorMap {
        @if type-of($colorValue) == "color" {
          --#{$colorName}-#{$colorKey}: #{$colorValue};
          --#{$colorName}-#{$colorKey}-rgb: #{red($colorValue)}, #{green($colorValue)},
            #{blue($colorValue)};
        }
      }
    }
  }
}

$custom-typography: mat.define-typography-config(
  $subtitle-2: mat.define-typography-level(1rem, 1.5rem, 700),
  $body-1: mat.define-typography-level(1rem, 1.5rem, 500)
);

html {
  font-size: 14px;
}
body {
  @include mat.all-component-typographies($custom-typography);

  margin: 0;
  padding: 0;
  font-family: "Roboto", sans-serif;
  font-size: 1rem;
  * {
    box-sizing: border-box;
  }
  &::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }
  &::-webkit-scrollbar-track {
    background: #fff;
  }
  &::-webkit-scrollbar-thumb {
    background: #c2c2c2;
    border-radius: 4px;
  }
  &::-webkit-scrollbar-thumb:hover {
    background: #9d9d9d;
  }
}

:root {
  &:not(.dark) {
    @include mat.all-component-themes($app-light-theme);
    @include vars($app-light-theme, 0.6);
  }
  &.dark {
    @include mat.all-component-themes($app-dark-theme);
    @include vars($app-dark-theme, 0);
    .mat-mdc-input-element {
      color: white;
    }
  }
}

/* TODO(mdc-migration): The following rule targets internal classes of card that may no longer apply for the MDC version.*/
/* TODO(mdc-migration): The following rule targets internal classes of card that may no longer apply for the MDC version.*/
mat-card {
  &.mdc-elevation-z25 {
    box-shadow: 0 4px 16px rgba(var(--primary-default-rgb), 0.07);
  }
  /* TODO(mdc-migration): The following rule targets internal classes of card that may no longer apply for the MDC version.*/
  mat-card-actions {
    margin: 0px !important;
    padding: 0px !important;
    display: flex !important;
    justify-content: flex-end;
    .save-button {
      mat-icon {
        margin-right: 5px;
      }
      mat-progress-spinner {
        display: inline-block;
        margin-right: 5px;
      }
    }
  }
}

mat-form-field {
  .mdc-form-field__outline {
    background: rgba(var(--background-app-bar-rgb), calc(0.22 + var(--tone-diff)));
    border-radius: 5px;
    top: 0.75em !important;
    > * {
      visibility: hidden;
    }
  }
  .mdc-form-field__label {
    top: 2.14375em !important;
  }
  &.mdc-form-field--outlined.mdc-form-field--can-float.mdc-form-field--should-float {
    .mdc-form-field__label {
      transform: translateY(-1.89375em) scale(0.75) !important;
    }
  }
}

:root:not(.dark) {
  mat-toolbar {
    background-color: #fafafa !important;
  }
}

.ng-tooltip {
  position: absolute;
  max-width: 250px;
  font-size: 13px;
  text-align: center;
  color: #f8f8f2;
  padding: 6px;
  background: rgba(97, 97, 97, 0.9);
  border-radius: 4px;
  z-index: 1000;
  opacity: 0;
}

.ng-tooltip:after {
  bottom: 100%;
  left: 50%;
  margin-left: -5px;
  border-width: 5px;
  border-color: transparent;
}

.ng-tooltip-show {
  opacity: 1;
}

.ng-disabled-button {
  opacity: 0.3 !important;

  // remove hover effect
  /* TODO(mdc-migration): The following rule targets internal classes of button that may no longer apply for the MDC version.*/
  /* TODO(mdc-migration): The following rule targets internal classes of button that may no longer apply for the MDC version.*/
  span.mat-button-focus-overlay {
    background: unset !important;
  }
}
.mat-mdc-menu-item[color="warn"] {
  color: var(--warn-500) !important;
}

.ng-disabled-button:hover {
  cursor: not-allowed;
}

table.striped tr:nth-child(even) td {
  background-color: rgba(var(--background-background-rgb), 1) !important;
}

mat-table.striped mat-row:nth-child(even) {
  background-color: rgba(var(--background-background-rgb), 1) !important;
}
.mat-mdc-menu-panel {
  min-width: 180px !important;
}

.minimal-input-placer {
  > mat-form-field {
    /* TODO(mdc-migration): The following rule targets internal classes of form-field that may no longer apply for the MDC version.*/
    /* TODO(mdc-migration): The following rule targets internal classes of form-field that may no longer apply for the MDC version.*/
    .mat-form-field-wrapper {
      padding: 0px !important;
      margin: 0px !important;
      /* TODO(mdc-migration): The following rule targets internal classes of form-field that may no longer apply for the MDC version.*/
      .mat-form-field-hint-wrapper,
      .mat-form-field-label {
        display: none;
      }
    }
  }
}

button.dashboard-component-refresh-button {
  position: absolute;
  right: 0px;
  top: 0px;
  mat-icon {
    width: 30px;
    height: 30px;
    line-height: 30px;
  }
}

.dashboard-component {
  height: 100% !important;
  display: flex !important;
  flex-direction: column;
  justify-content: space-between;
}

.dashboard-component-filter {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  align-items: center;
  gap: 0px 10px;
  width: 100% !important;
}

div.dashboard-component-content {
  width: 100%;
  text-align: center;

  .dashboard-hidden-component {
    position: absolute;
    top: 100%;
    left: 0;
    padding: 0;
    border: 1px solid rgb(var(--background-app-bar-rgb));
    overflow: hidden;
  }

  .dashboard-hidden-component-container {
    width: 0px;
    height: 0px;
    transition: 0.3s all;
    opacity: 0;
  }

  .dashboard-visible-component-container {
    width: 480px;
    height: 480px;
    transition: 0.3s all;
    padding: 10px;
    opacity: 1;
  }
}

button[mat-icon-button] {
  width: 40px !important;
  height: 40px !important;
  min-width: 40px !important;
  min-height: 40px !important;
  padding: 0 !important;

  letter-spacing: normal !important;
}

::ng-deep .mat-button,
::ng-deep .mat-icon-button {
  flex-direction: row-reverse;
}

button[mat-icon-button] mat-icon {
  vertical-align: middle;
}
